apply plugin: 'base'
apply plugin: 'sonar'
apply plugin: 'jacoco'

configurations {
  doclet
  jacocog
}

repositories {
  maven {
    url 'http://deco2800.uqcloud.net/artifactory/everything'
  }
  ivy {
    url 'http://deco2800.uqcloud.net/artifactory/everything'
  }
}

dependencies {
  doclet group: 'org.jboss.apiviz', name: 'apiviz', version: '1.3.2.GA'
  //doclet group: 'org.yworks', name: 'ydoc', version: '3.0.02'
  jacocog group: 'org.jacoco', name: 'org.jacoco.ant', version: '0.6.3.201306030806' 
}

buildscript {
  repositories {
    maven {
      url 'http://deco2800.uqcloud.net/artifactory/everything'
    }
  }
  dependencies {
    classpath "net.saliman:gradle-cobertura-plugin:1.1.1"
  }
}


sonar {
  project {
    name = "DECO2800 Arcade"
  }
  server {
    if (rootProject.hasProperty('sonarServerURL')) {
      url = sonarServerURL
    }
  }
  database {
    if (rootProject.hasProperty('sonarDatabaseURL')) {
      url = sonarDatabaseURL 
    }
    if (rootProject.hasProperty('sonarDatabaseDriver')) {
      driverClassName = sonarDatabaseDriver 
    }
    if (rootProject.hasProperty('sonarDatabaseLogin')) {
      username = sonarDatabaseLogin 
    }
    if (rootProject.hasProperty('sonarDatabasePassword')) {
      password = sonarDatabasePassword 
    }
  }
  project {
    dynamicAnalysis = "reuseReports"
    withProjectProperties { props ->
      props["sonar.core.codeCoveragePlugin"] = "jacoco"
      props["sonar.jacoco.reportPath"] = "$reportsDir/jacoco/jacocoTest.exec"
    }

    testReportPath = file("$buildDir/test-results")
  }

}

subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'jacoco'

  sourceCompatibility = 1.6
  targetCompatibility = 1.6

  repositories {
    maven {
      url 'http://deco2800.uqcloud.net/artifactory/everything'
    }
    ivy {
      url 'http://deco2800.uqcloud.net/artifactory/everything'
    }
  }

  dependencies {
    compile group: 'org.slf4j', name:'slf4j-api', version: '1.7.5'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.5'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'

    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    testCompile group: "junit", name: "junit", version: "4.11"
    testCompile group: "org.mockito", name: "mockito-all", version: "1.9.5"
  }

  version = '1.0'

  jar {
    manifest.attributes provider: 'gradle'
  }

  // server resource copying - could be made a seperate task but works fine for now
  build << {
    def projComponents = project.name.split('\\.')
    def projName = projComponents[projComponents.size() - 1]
    def sep = File.separator
    def serverResourcesDir = file(project.projectDir.getPath() + sep + "serverResources")
    def targetDir = file(project(':deco2800.arcade.server').projectDir.getPath() + sep + "build" + sep + "resources" + sep + "main" + sep + projName)
    if(serverResourcesDir.exists()) {
      println projName + " has server resources"
      targetDir.mkdirs()
      project.copy {
        from serverResourcesDir.getPath()
        into targetDir.getPath()
      }
    }
  }

}

task alldocs(type: Javadoc) {
    group 'Documentation'
    description 'Generates aggregated Javadoc API documentation for the main source code of all projects.'

    doFirst {
        subprojects.each { project ->
            project.sourceSets.main.output.each { dir ->
                dir.mkdirs()
            }
        }
    }
    source subprojects.collect { project ->
        project.sourceSets.main.allJava
    }
    destinationDir = new File(buildDir, 'javadoc')
    // Might need a classpath
    classpath = files(subprojects.collect { project ->
        project.sourceSets.main.compileClasspath
    })
    options.addStringOption('sourceclasspath', files(subprojects.collect { project ->
        project.sourceSets.main.output
    }).getAsPath())
    //options.addBooleanOption('umlautogen')
    //options.addStringOption('resourcepath', System.properties['yDoc.path'] + '/resources')
    options.showAll()
    //println options
    configure(options) {
        windowTitle project.name
        docTitle project.name
        links 'http://docs.oracle.com/javase/7/docs/api/'
        doclet 'org.jboss.apiviz.APIviz'
        //doclet 'ydoc.doclets.YStandard'
        docletpath file(configurations.doclet.asPath)
    }

}

//alldocs.onlyif { System.properties['yDoc.path'] }

task (releaseArcade, dependsOn: ":deco2800.arcade.ui:installApp", type: Copy) {
	from "deco2800.arcade.ui/build/install/deco2800.arcade.ui"
	into "release"
}


task jacocoReport(type: JacocoReport) {
    jacocoClasspath = configurations.jacocog
    // Add execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("*/build/jacoco/*.exec")
    // Add source classes from all subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    // Make the aggregate report go in a top-level directory somewhere
    reports {
        html {
            enabled true
            destination "build/reports/jacoco"
        }
    }
}
